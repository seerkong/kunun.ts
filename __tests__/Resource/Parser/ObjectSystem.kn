[main {
    # 字段原语 field property method func proc


    # 结构类型原语
    # struct 栈内存，只有field
    # record 堆内存 只有field
    
    # object 没有父类。可以有field property method func proc
    # class 堆内存 也是一种object 类型描述对象.
    # class创建后是 instance 堆内存 是class的实例，也是一种object，有static 、singleton、 prototype的子类别

    # mixin 需要在class中被include才生效.没有field, 可以有 property method func proc
    # extension import后后直接生效。没有field, 可以有 property method func proc
    # partial import后后直接生效. 将一个class的声明，拆分到多个文件中. 可以有field property method func proc

    # 协议原语
    # interface protocol union anyof

    # 字段开闭原语
    # open close

    [struct A {
        [field m]
        [field n]
      }
    ]

    [mixin M1 for A
      [method i (a1 ~Int a2 ~Int) ~<Int> {

        }
      ]
      [calc_prop j set (value) {
          [set m value]
        }
        get () {
          m
        }
      ]
    ]

    [extension for A
      [method i (a1 ~Int a2 ~Int) ~<Int> {
        }
      ]
      [property j set (value) {
          [set m value]
        }
        get () {
          m
        }
      ]
    ]

    [object val
      %
      m ~ Int =
        [field public]
      n =
        [property :public set :{m}(value) {
            [set m value]
          }
          :public get {
            m
          }
        ]
      o =
        [property :public get :{m n} {
            [append (m n)]
          }
        ]
      q ~ [method (Tree Int) ~<Int>] =
        [method (tree ~Tree count ~Int) ~<Int>
          {
            [* (5 count)]
          }
        ]
      %
    ]

    # file partial1.kn
    [partial MyObj {
        [field m]
        [method i (a1 ~Int a2 ~Int) ~<Int>
          {
          }
        ]
      }
    ]

    [class MyObj
      %
      inherit =
        Object
      protocol =
        [
          Readable
          Serializable
        ]
      mixins =
        {
          M1
          M2
        }
      %
      {
        [ctor () {
          }
        ]
        [ctor (m n) {
          }
        ]
        [field m :public set :private get]
        [property :public set :{m}(value) {
            [set m value]
          }
          :public get {
            m
          }
        ]
        [property :public get :{m n} {
          [append (m n)]
          }
        ]
        [method (tree ~Tree count ~Int) ~<Int>
          {
            [* (5 count)]
          }
        ]
      }
    ]

    [protocol P_10
      %
      inherit =
        {
          P_0
          P_1
        }
      % {
        [field m]
        [property n get]
        [property o get set]
        [method m1 (a1 ~Int a2 ~Int) ~<Int>]
        [method m1 (a1 ~Int) ~<Int>]
      }
    ]

    [interface I_10
      %
      inherit =
        {
          I_0
          I_1
        }
      %
      {
        [property n get]
        [property o get set]
        [method m1 (a1 ~Int a2 ~Int) ~<Int>]
        [method m1 (a1 ~Int) ~<Int>]
      }
    ]
  }
]